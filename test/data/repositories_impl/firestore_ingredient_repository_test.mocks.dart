// Mocks generated by Mockito 5.4.6 from annotations
// in komarigoto_app/test/data/repositories_impl/firestore_ingredient_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i2;
import 'package:komarigoto_app/data/datasources/firestore_wrapper.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseFirestore_0 extends _i1.SmartFake
    implements _i2.FirebaseFirestore {
  _FakeFirebaseFirestore_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_1<T extends Object?> extends _i1.SmartFake
    implements _i2.QuerySnapshot<T> {
  _FakeQuerySnapshot_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_2<T extends Object?> extends _i1.SmartFake
    implements _i2.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirestoreWrapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreWrapper extends _i1.Mock implements _i3.FirestoreWrapper {
  MockFirestoreWrapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseFirestore get firestore =>
      (super.noSuchMethod(
            Invocation.getter(#firestore),
            returnValue: _FakeFirebaseFirestore_0(
              this,
              Invocation.getter(#firestore),
            ),
          )
          as _i2.FirebaseFirestore);

  @override
  _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>> getCollection(
    String? path,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCollection, [path]),
            returnValue:
                _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>>.value(
                  _FakeQuerySnapshot_1<Map<String, dynamic>>(
                    this,
                    Invocation.method(#getCollection, [path]),
                  ),
                ),
          )
          as _i4.Future<_i2.QuerySnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>> getDocument(
    String? path,
    String? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDocument, [path, id]),
            returnValue:
                _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>.value(
                  _FakeDocumentSnapshot_2<Map<String, dynamic>>(
                    this,
                    Invocation.method(#getDocument, [path, id]),
                  ),
                ),
          )
          as _i4.Future<_i2.DocumentSnapshot<Map<String, dynamic>>>);

  @override
  _i4.Future<void> setDocument(
    String? path,
    String? id,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#setDocument, [path, id, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDocument(String? path, String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocument, [path, id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
